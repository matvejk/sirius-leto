from matplotlib.animation import FuncAnimation

from src.lab1_pendulum.constants_lab1 import *
from src.general.constants import *
from src.general.math import *


with open(datapath) as f:  # reading data generated by `model.py`
	dt, l, t_max, n = [float(f.readline().strip()) for _ in range(4)]

	time_array = [float(i) for i in f.readline().strip().split()]
	alpha_array = [float(i) for i in f.readline().strip().split()]

n = int(n)

mpl.rcParams['mathtext.fontset'] = 'cm'
mpl.rcParams['figure.figsize'] = (figsize, figsize)

fig, ax = plt.subplots()
plt.title("Numerical model of a pendulum")
plt.grid(True, linestyle='--')
plt.xlabel(r'$x, m$', fontsize=13)
plt.ylabel(r'$y, m$', fontsize=13)
plt.xlim(-plot_lims*l, plot_lims*l)
plt.ylim(-plot_lims*l, plot_lims*l)

pendulum_line, = plt.plot([], [], linewidth=2, color='blue')
pendulum_axis, = plt.plot([pendulum_axis_x], [pendulum_axis_y], marker='o', markersize=5, color='red')
pendulum_point, = plt.plot([], [], marker='o', markersize=5, color='red')
time_text = plt.text(0, text_y*l, "", fontsize=20)


def animate(frame: int) -> tuple:
	data_item_index = render_dt * frame
	time = dt * data_item_index

	if data_item_index >= n:
		return pendulum_line, pendulum_point, time_text

	alpha: float = alpha_array[data_item_index] - pi/2

	x, y = pol2cart(l, alpha)

	x += pendulum_axis_x
	y += pendulum_axis_y

	pendulum_point.set_data([x], [y])
	pendulum_line.set_data([pendulum_axis_x, x], [pendulum_axis_y, y])

	time_text.set_text(rf"${time:.2f}\,s$")

	return pendulum_line, pendulum_point, time_text


animation = FuncAnimation(fig, animate, interval=0, frames=n-1, blit=True)
plt.show()
