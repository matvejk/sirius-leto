from time import time as real_time
from typing import Literal

from matplotlib.animation import FuncAnimation

import src  # noqa do not delete! see line 11
from src.general.constants import *
from src.general.calculations import *


def animate(mode: Literal["basic", "windage"], plot_animation: bool = True, plot_alpha: bool = True):
	global t0

	constants_local = eval(f"src.lab1_pendulum.{mode}.constants")
	datapath = constants_local.datapath
	figsize = constants_local.figsize
	plot_lims = constants_local.plot_lims
	pendulum_axis_x = constants_local.pendulum_axis_x
	pendulum_axis_y = constants_local.pendulum_axis_y
	text_y = constants_local.text_y
	render_dt = constants_local.render_dt
	frames_count = constants_local.frames_count

	with open(datapath) as f:  # reading data generated by `model.py`
		dt, l, t_max, n = [float(f.readline().strip()) for _ in range(4)]

		time_array  = [float(i) for i in f.readline().strip().split()]
		alpha_array = [float(i) for i in f.readline().strip().split()]

	n = int(n)

	mpl.rcParams['mathtext.fontset'] = 'cm'
	mpl.rcParams['figure.figsize'] = (figsize, figsize)

	t0 = real_time()  # do not remove, required for fps counting!

	def animation_step(frame: int) -> tuple:
		global t0
		data_item_index = render_dt * frame
		time = dt * data_item_index

		if frame == 0:
			t0 = real_time()  # do not remove, required for fps counting!
		elif frame % frames_count == 0:
			t1 = real_time()  # noqa - this is an ide mistake. do not remove, required for fps counting!
			print("\x1B[H\x1B[J")  # clearing console
			# it is better than `os.system('cls')`, bcos faster

			print(f'fps = {frames_count / (t1 - t0):2}')

			t0 = real_time()

		if data_item_index >= n:
			return pendulum_line, pendulum_point, time_text

		alpha: float = alpha_array[data_item_index] - pi/2

		x, y = pol2cart(l, alpha)

		x += pendulum_axis_x
		y += pendulum_axis_y

		pendulum_point.set_data([x], [y])
		pendulum_line.set_data([pendulum_axis_x, x], [pendulum_axis_y, y])

		time_text.set_text(rf"${time:.2f}\,s$")

		return pendulum_line, pendulum_point, time_text

	if plot_animation:
		fig, _ = plt.subplots()
		plt.title("Numerical model of a pendulum")
		plt.grid(True, linestyle='--')
		plt.xlabel(r'$x, m$', fontsize=13)
		plt.ylabel(r'$y, m$', fontsize=13)
		plt.xlim(-plot_lims * l, plot_lims * l)
		plt.ylim(-plot_lims * l, plot_lims * l)

		pendulum_line, = plt.plot([], [], linewidth=2, color='blue')
		pendulum_axis, = plt.plot([pendulum_axis_x], [pendulum_axis_y], marker='o', markersize=5, color='red')  # noqa, required for animation
		pendulum_point, = plt.plot([], [], marker='o', markersize=5, color='red')
		time_text = plt.text(0, text_y * l, "", fontsize=20)
		animation = FuncAnimation(fig, func=animation_step, interval=0, frames=n, blit=True, repeat=False, cache_frame_data=True)  # noqa, no comments :)

	if plot_alpha:
		fig, _ = plt.subplots()
		plt.grid(True, linestyle='--')
		plt.xlabel("Time, s")
		plt.ylabel("Angle, rad")
		plt.plot(time_array, alpha_array)

	plt.show()
